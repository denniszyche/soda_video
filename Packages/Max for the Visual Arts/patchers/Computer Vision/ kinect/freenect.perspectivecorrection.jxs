<jittershader name="freenect.perspectivecorrection">		<description>		This shader processes the depth map of the jit.freenect.grab external and outputs 	perspective-corrected x,y,z vertex coordinates for use with jit.gl.mesh and others. It expects 	jit.freenect.grab to output in mode 0 (raw).  		Based on the math at http://openkinect.org/wiki/Imaging_Information.		Shader by Dieter Vandoren (http://dietervandoren.net).		</description>
			<param name="minDistance" type="float" default="-0.024" />	<param name="scaleFactor" type="float" default="0.0021" />	//<param name="dim" type="vec2" default="64. 48." />	<param name="tex0" type="float" default="0." />	<language name="glsl" version="1.0">		<bind param="minDistance" program="fp" />		<bind param="scaleFactor" program="fp" />		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />		<program name="fp" type="fragment">		<![CDATA[
//the essential stuff	uniform sampler2DRect tex0;
	varying vec2 texcoord0;	//our special stuff	uniform float minDistance;	uniform float scaleFactor;	uniform vec2 dim;
void main(){   		// z = .1236*tan(in[0]/2842.5+1.1863)		// 3vt = "(cell[0]-dim[0]/2.) * (in[0]-in[1]) * in[2] " "(cell[1]-dim[1]/2.) * (in[0]-in[1]) * in[2]" in[0]		float z = 0.1236*tan(texture2DRect(tex0, texcoord0).r/2842.5+1.1863);		gl_FragColor.w = (texcoord0.x-320.)*(z-minDistance)*scaleFactor*0.13;	gl_FragColor.x = (texcoord0.y-240.)*(z-minDistance)*scaleFactor*0.13;	gl_FragColor.y = z*0.13;	gl_FragColor.z = 1.;	}]]>		</program>	</language></jittershader>