<jittershader name="modelTextureShader">
    <description> Our first shader tutorial </description>

    <param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="modelViewMatrix" type="mat4" state="MODELVIEW_MATRIX" />
    <param name="texture0_Mat" type="mat4" state="TEXTURE0_MATRIX"/>
    <param name="texture1_Mat" type="mat4" state="TEXTURE0_MATRIX"/>

    <param name="position" type="vec3" state="POSITION" />
    <param name="textureCoord" type="vec2" state="TEXCOORD" />
    <param name="vertexNormal" type="vec3" state="NORMAL" />
    
    <param name="tex0" type="int" default="0"/>
    <param name="tex1" type="int" default="1"/>


    <language name="glsl" version="1.5">
      

      <bind param="tex0" program="fp" />

      <bind param="modelViewProjectionMatrix" program="vp" />
      <bind param="modelViewMatrix" program="vp" />
      <bind param="texture0_Mat" program="vp" />
      <bind param="textureCoord" program="vp" />
      <bind param="position" program="vp" />
      <bind param="vertexNormal" program="vp" />
      
      <program name="vp" type="vertex">
<![CDATA[

// vertex shader
#version 330 core

uniform mat4 modelViewProjectionMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 texture0_Mat;

in vec3 position;
in vec3 vertexNormal;
in vec2 textureCoord;


out vec2 texCoord;



void main() 
{


    texCoord = (texture0_Mat * vec4(vertexNormal, 1.0)).xy;
    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);
}
]]>
    </program>

    <program name="fp" type="fragment">
<![CDATA[

// fragment shader
#version 330 core

in vec2 texCoord;

uniform sampler2DRect tex0;


out vec4 outColor;

void main() 
{
    
    outColor = texture(tex0, texCoord);
}
]]>
    </program>
    </language>
</jittershader>