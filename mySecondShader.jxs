<jittershader name="myFirstShader">
    <description> Our first shader tutorial </description>

    <param name="position" type="vec3" state="POSITION" />
    <param name="vertexColor" type="vec4" state="COLOR" />
    <param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    
    
    <param name="color_a" type="vec3" default="1.0, 1.0, 1.0">
      <description>Color A</description>
    </param>

    <param name="color_b" type="vec3" default="0.0, 0.0, 0.0">
      <description>Color B</description>
    </param>

    <param name="color_c" type="vec3" default="0.5, 0.5, 0.5">
      <description>Color C</description>
    </param>

    <param name="color_d" type="vec3" default="0.5, 0.5, 0.5">
      <description>Color D</description>
    </param>

    <param name="color_e" type="vec3" default="0.5, 0.5, 0.5">
      <description>Color D</description>
    </param>

    <param name="freq" type="float" default="0.0">
      <description>The frequency of the noise</description>
	  </param>



    <language name="glsl" version="1.5">

    
    <bind param="position" program="vp" />
    
    // <bind param="vertexColor" program="vp" />
    <bind param="modelViewProjectionMatrix" program="vp" />
    
    <bind param="timer" program="fp" />
    <bind param="color_a" program="fp" />
    <bind param="color_b" program="fp" />
    <bind param="color_c" program="fp" />
    <bind param="color_d" program="fp" />
    <bind param="color_e" program="fp" />
    <bind param="freq" program="fp" />

    <program name="vp" type="vertex">
<![CDATA[

// vertex shader
#version 330 core

in vec3 position;
uniform mat4 modelViewProjectionMatrix;
out vec4 v_position;

void main() 
{
    v_position = modelViewProjectionMatrix * vec4(position, 1.0);
    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);
}
]]>
    </program>

    <program name="fp" type="fragment">
<![CDATA[

// fragment shader
#version 330 core

in vec4 v_position;

uniform vec3 color_a;
uniform vec3 color_b;
uniform vec3 color_c;
uniform vec3 color_d;
uniform vec3 color_e;

vec3 myVecArray[5] = vec3[5](color_a, color_b, color_c, color_d, color_e);

uniform float freq;

out vec4 outColor;

vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float cnoise(vec3 P){
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 / 7.0;
  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 / 7.0;
  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}

void main() 
{

  float noise = cnoise(v_position.xyz * freq);
  
  outColor = vec4(myVecArray[4], 1.0);
  

  for (int i = 0; i < 4; i++) {
    float noise_flow = 5. * float(i) * 0.3;
    float noise_speed = 10. * float(i) * 0.3;
    float noise_seed = 1.0 * float(i) * 10;
    vec2 noise_freq = vec2(3.0, 4.0);
    
    float noise = cnoise(
      vec3(
        v_position.x + freq * noise_flow,
        v_position.y * freq,
        freq * noise_speed + noise_seed
      )
    );
    outColor = mix(outColor, vec4(myVecArray[i], 1.0), noise);
  }
    
}
]]>
    </program>
    </language>
</jittershader>